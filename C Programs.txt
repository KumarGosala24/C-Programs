#include <stdio.h>
#include <stdbool.h>

void prime_number(int num) {
    if (num <= 1) {
        printf("%d is not a prime number\n", num);
        return;
    }

    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0) {
            printf("%d is not a prime number\n", num);
            return;
        }
    }
    printf("%d is a prime number\n", num);
}
int main(){
    int num;
    printf("Enter a number: ");
    scanf("%d",&num);
    
    prime_number(num);
}


void multiplicationTable(int n){
    
    printf("Multiplication table %d is ",n);
    for(int i =1;i<=10;i++){
        printf("%d x %d = %d\n",n,i,n*i);
    }
}
// int main(){
//     int n;
//     printf("Enter a number: ");
//     scanf("%d",&n);
//     multiplicationTable(n);
// }

// Right angle
void pattern(int n){
    
    for(int i =0;i<=n;i++){
        for(int j = 0;j<i;j++){
            printf("*");
        }
        printf("\n");
    }
}
// int main(){
//     int n;
//     printf("Enter a number: ");
//     scanf("%d",&n);
//     pattern(n);
// }

void Simpleintrest(float p,float r,float t){
    
    float si;
    si = (p*t*r)/100;
    printf("%.2f\n",si);
}
// int main(){
//     float p,t,r;
//     printf("\nEnter a Price :");
//     scanf("%f",&p);
    
//     printf("\nEnter a rate :");
//     scanf("%f",&r);
    
//     printf("\nEnter a Time :");
//     scanf("%f",&t);
    
//     Simpleintrest(p,r,t);
// }

bool is_prime(int num){
    if (num <= 1){
        return false;
    }
    for(int i=2;i*i<=num;i++){
        if(num%i==0){
            return false;
        }
        return true;
    }
}
void check_primes(int arr[],int size){
    for(int i =0;i<size;i++){
        if (is_prime(arr[i])){
            printf("%d is a prime\n",arr[i]);
        } 
        else{
            printf("%d is not prime\n",arr[i]);
        }
    }
}

// int main(){
//     int arr[] = {2,1, 3, 4, 5, 6, 7, 8, 9, 10, 11};
//     int size = sizeof(arr)/sizeof(arr[0]);
    
//     check_primes(arr,size);
    
// }

int maxofTwo(int a, int b) {
    return (a > b) ? a : b;
}
// int main() {
//     int a, b;

//     a = 10; b = 20;
//     printf("Max of %d and %d is: %d\n", a, b, maxofTwo(a, b));
    
//     a = -3; b = -5;
//     printf("Max of %d and %d is: %d\n", a, b, maxofTwo(a, b));
    
//     a = -2; b = -2;
//     printf("Max of %d and %d is: %d\n", a, b, maxofTwo(a, b));
    
//     return 0;
// }

// FACTORIAL 
unsigned long long Factorial(int n){
    
    unsigned long long result = 1;
    for(int i =1;i<=n;i++){
        result *= i;
    }
    return result;
}
// int main(){
//     int n;
//     printf("Enter a number: ");
//     scanf("%d",&n);
    
//     if (n<0){
//         printf("%d is not a definied");
//     }
//     else{
//         printf("The factoriual of %d is :%llu",n,Factorial(n));
//     }
// }

int main(){
    int height;
    printf("Enter a height:");
    scanf("%d",&height);
    
    for(int i = 1;i<=height;i++){
        for(int j = i;j<height;j++){
            printf(" ");
        }
        for(int k = 1;k<=(2*i-1);k++){
            printf("!");
        }
        printf("\n");
    }
    for(int i = height-1; i>= 1;i--){
        for(int j=height;j>i;j--){
            printf(" ");
        }
        for(int k = 1;k<=(2*i-1);k++){
            printf("^");
        }
        printf("\n");
    }
}

// ARRAY ADDRESS
void array_address(char arr[],int size){
   
    for(int i = 0;i<size;i++){
        printf("%zu\n",&arr[i]);
    }
}
// int main(){
    
//     char arr[] = {'H','e','l','l','o'};
//     int size = sizeof(arr)/sizeof(arr[0]);
//     array_address(arr,size);
// }

// PRIMES 
bool whether_prime(int n){
    
    if(n<=1){
        return false;
    }
   
    for(int i =2;i*i<=n;i++){
        if(n%i==0){
            return false;
        }
        return true;
    }
}
// int main(){
//     int n;
//     printf("Enter a number: ");
//     scanf("%d",&n);
    
//     if (whether_prime(n)){
//         printf("true");
//     }
//     else{
//         printf("Flase");
//     }
// }

void dividingTwointegers(){
    // float a= 6,b=4;
    
    float f = (float)(6/4);
    // float f = (float)a/b;
    printf("%.2f\n",f);
}
// int main(){
//     dividingTwointegers();
// }

// EVEN/ODD
void Evenorodd(int num){
    if(num%2==0){
        printf("Even");
    }
    else{
        printf("Odd");
    }
}
// int main(){
//     int num;
//     printf("Enter a number: ");
//     scanf("%d",&num);
//     Evenorodd(num);
// }

unsigned long long factorial(int n){
    
    if(n==0 || n==1){
        return 1;
    }
    else{
        return n*factorial(n-1);
    }
}
// int main(){
//     int n;
//     printf("Enter a number: ");
//     scanf("%d",&n);
//     printf("The factorial of %d is : %llu",n,factorial(n));
// }

// SUM OF ARRAY
int Array_sum(int arr[],int size){
    int sum =0;
    for(int i = 0;i<=size;i++){
        sum += arr[i];
    }
    return sum;
}
// int main(){
//     int arr[] = {1,2,3,4,5,6};
//     int size = sizeof(arr)/sizeof(arr[0]);
    
//     int total_sum = Array_sum(arr,size);
//     printf("Total sum is : %d",total_sum);
// }

int fibonacci(int n){
    int n1 =0,n2 = 1;
    int nextterm;
    for(int i=0;i<=n;i++){
        
        printf("%d ",n1);
        nextterm = n1+n2;
        n1 = n2;
        n2 = nextterm;
    }
}
// int main(){
//     int n;
//     printf("Enter a number: ");
//     scanf("%d",&n);
//     int x = fibonacci(n);
//     printf("%d ",x);
    
// }

// FIBONACCI SERIES USING RECURSION
int Fibonacci_recursion(int n){
    if (n ==0){
        return 0;
    }
    else if(n==1){
        return 1;
    }
    else{
        return Fibonacci_recursion(n-1) + Fibonacci_recursion(n-2);
    }
}
// int main(){
//     int n;
//     printf("Enter a number: ");
//     scanf("%d",&n);
    
//     if (n<0){
//         printf("Not defined");
//     }
//     else{
//         printf("Fibonacci series: %d", Fibonacci_recursion(n));
//     }
// }


#include <stdio.h>
#include <string.h>
#include <ctype.h>

void countDown(int n){
    printf("CountDown started for method with n value %d\n",n);
    if(n<0){
        printf("\n\n\nStopping countDown  ...Happy recursion pratice\n\n");
        return;
    }
    printf("countDown Starts now:%d\n",n);
    countDown(n-1);
    printf("CountDown completed for method with n values %d\n",n);
}
// int main(){
//     int n;
//     printf("Enter a n value: ");
//     scanf("%d",&n);
//     countDown(n);
// }

void countDownwithEvennum(int n){
    if (n<=0){
        return;
    }
    if(n%2==0){
        printf("\n%d",n);
        countDownwithEvennum(n-2);
    }
}
// int main(){
//     int n = 20;
//     countDownwithEvennum(n);
// }

void countDownwithOddnum(int n){
    if (n<0){
        return;
        
    }
    printf("%d\n",n);
    countDownwithOddnum(n-1);
    
}
// int main(){
//     int n = 2;
//     countDownwithOddnum(n);
// }

void countDownTillModuleEqualToZero(int n){
    if (n<=0){
        return;
    }
    printf("\n%d",n);
    countDownTillModuleEqualToZero(n-1);
}
// int main(){
//      int n = 12;
//     countDownTillModuleEqualToZero(n);
//  }

unsigned long long Factorial(int n){
    if (n==0){
        return 1;
    }
    else{
        return  n * Factorial(n-1);
    }
}
// int main(){
//     int n = 5;
//     printf("Factorial of %d is : %llu",n,Factorial(n));
// }

int fibonacci(int n) {
    if (n == 0) return 0;
    if (n == 1) return 1;
    
    int a = 0, b = 1, c = 0;
    for (int i = 2; i <= n; i++) {
        c = a + b;
        a = b;
        b = c;
    }
    return c;
    
}
// int main() {
//     int n =7;
//     printf("Fibonacci number at position %d is %d\n", n,fibonacci(n));
//     for(int i = 0;i<=n;i++){
//         printf("%d\n",fibonacci(i));
//     }
//     printf("\n");
// }

void Modulus(int a, int b) {
    if (a <= 0 || b <= 0) {
        return;
    }
    printf("%d modulus of %d is %d\n", a, b, a % b);
    Modulus(b, a % b);
}                                                       //GCD and modulus
// int main() {
//     int a, b;
//     printf("Enter two numbers: ");
//     scanf("%d %d", &a, &b);  // Corrected format string
//     Modulus(a, b);
//     return 0;
// }

int is_palindromeRec(char str[],int left,int right){
    if(left >=right){
        return 1;
    }
    if(str[left] != str[right]){
        return 0;
    }
    return is_palindromeRec(str,left + 1,right - 1);
}
// int main(){
//     char str[100] = "madam";
//     int left;
//     int right = strlen(str) -1 ;
    
//     if (is_palindromeRec(str, left, right)) {
//         printf("\"%s\" is a palindrome.\n", str);
//     } else {
//         printf("\"%s\" is not a palindrome.\n", str);
//     }
// }

int sumofArray(int arr[],int size){
    int sum = 0;
    for(int i = 0;i<size;i++){
        sum += arr[i];
    }
    return sum;
}
// int main(){
//     int arr[] = {2,3,4,5,6};
//     int size = sizeof(arr)/sizeof(arr[0]);
//     printf("Array sum : %d",sumofArray(arr,size));
// }


void towerofHonoi(int n,char source,char target,char auxiliary){
    if (n==1) {
        printf("Move disk 1 from %c to %c\n",source,target);
        return;
    }
    towerofHonoi(n-1,source,auxiliary,target);
    printf("Move disk %d from %c to %c\n",n,source,target);
    towerofHonoi(n-1,auxiliary,target,source);
}
// int main(){
    
//     towerofHonoi(3,'A','B','C');
// }



void mat(int r,int c){
    for(int i = 0;i<r;i++){
        for(int j = 0;j<c;j++){
            printf("%d %d\n",i,j);
        }
    }
}
// int main(){
//     mat(3,4);
// }



void addMatrix(int a[2][2],int b[2][2],int result[2][2]){
   for(int i = 0;i<2;i++){
       for(int j = 0;j<2;j++){
           result[i][j] = a[i][j] + b[i][j];
       }
   }
}
// int main(){
//     int a[2][2] = {{1,2},{3,4}};
//     int b[2][2] = {{5,6},{7,8}};
//     int result[2][2];
//     addMatrix(a,b,result);
    
//     for(int i = 0;i<2;i++){
//         for(int j = 0;j<2;j++){
//             printf("%d ",result[i][j]);
//         }
//         printf("\n");
//     }
// }


#include <stdio.h>

void array_swap(int arr[],int n){
    for(int i =0;i<n;i++){
        for(int j = i+1;j<n;j++){
            if (arr[i] > arr[j]){
               int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }
}
// int main(){
//     int n;
//     printf("Enter a size of array");
//   scanf("%d",&n);
   
//   int arr[n];
//   printf("Enter the elements of the array: ");
//     for (int i = 0; i < n; i++) {
//         scanf("%d", &arr[i]); 
//     }
    
//     array_swap(arr, n);
//     printf("Array after swapping/sorting: ");
//     for (int i = 0; i < n; i++) {
//         printf("%d ", arr[i]);
//     }
//     printf("\n");
// }

// #include <stdio.h>
// int main() {
//     int n;
//     printf("Enter a size of array: ",n);
//     scanf("%d", &n);
    
//     int arr[n]; 
//     for (int i = 0; i < n; i++) {
//         scanf("%d", &arr[i]); 
//     }
//     for (int i = 0; i < n; i++) {
//         for (int j = 0; j < n - i - 1; j++) { 
//             if (arr[j] > arr[j + 1]) { 
//                 int temp = arr[j]; 
//                 arr[j] = arr[j + 1];
//                 arr[j + 1] = temp;
//             }
//         }
//     }
//     // Print the sorted array
//     for (int i = 0; i < n; i++) {
//         printf("%d ", arr[i]); 
//     }
    
// }

void array_descending(int arr[],int n){
    for(int i = 0;i<n;i++){
        for(int j = i+1;j<n;j++){
            if (arr[i] < arr[j]){
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }
}
// int main(){
//     int n;
//     printf("Enter a size of array: ",n);
//     scanf("%d",&n);
    
//     int arr[n];
//     printf("Enter a elements of array: ");
//     for(int i = 0;i<n;i++){
//         scanf("%d",&arr[i]);
//     }
//     array_descending(arr,n);
//     printf("After Sorting: ");
//     for(int i = 0;i<n;i++){
//         printf("%d ",arr[i]);
//     }
//     printf("\nSecond largest element: ");
//     printf("%d",arr[1]);
// }

void searching(int arr[],int n,int key){
    for(int i = 0;i < n;i++){
        if(key==arr[i]){
            printf("Searched key value in array is : %d",arr[i]);    // for printing index position of element. i
           return;
        }
    }
    printf("Key value is not found\n");
}
// int main(){
//     int n;
//     printf("enter a size of array: ");
//     scanf("%d",&n);
    
//     int arr[n];
//     printf("Enter a array elements: ");
//     for(int i = 0;i<n;i++){
//         scanf("%d",&arr[i]);
//     }
    
//     int key;
//     printf("Enter a key value: ");
//     scanf("%d",&key);
    
//     searching(arr,n,key);
// }

void reverse_array(int arr[],int n){
    int start,end;
    start = 0;
    end = n-1;
    while(start < end){
        int temp = arr[start];
        arr[start] = arr[end];
        arr[end] = temp;
        start++;
        end--;
    }
}
// int main(){
    
//     int n;
//     printf("Enter a size of array : ",n);
//     scanf("%d",&n);
    
//     int arr[n];
//     printf("Enter a array elements: ");
//     for(int i = 0;i<n;i++){
//         scanf("%d",&arr[i]);
//     }
    
//     reverse_array(arr,n);
    
//     for(int i =0;i<n;i++){
//         printf("%d ",arr[i]);
//     }
// }

//STRING

#include <string.h>
// int main(){
//     char a[20];
//     scanf("%s",a);
//     printf("%s",a);
// }
// int main(){
//     char a[20];
//     fgets(a,sizeof(a),stdin);
//     puts(a);
// }

void display(char a[]){
    puts(a);
}
// int main(){
//     char a[20];
//     fgets(a,sizeof(a),stdin);
//     display(a);
//     printf("length of the string is : %zu ",strlen(a));
// }

// int main(){
//     char str1[] = "Hello";
//     char str2[] = "Hello";
//     int result = strcmp(str1,str2);
//     printf("%d",result);
// }

// int main(){
//     char a = 'A';
//     printf("%d",a);
// }

void asciikey(char a){
    a = 'A';
    printf("%d",a);
}
// int main(){
//     char a;
//     asciikey(a);
// }

void Checkvowlesornot(char str){
    scanf("%c",&str);
    if(str == 'a'|| str == 'e' || str == 'i'|| str == 'o'|| str == 'u'|| str == 'A'|| str == 'E'|| str == 'I'|| str == 'O'|| str == 'U'){
        printf("%c is a volwel",str);
    }
    else{
        printf("%c is a consonant",str);
    }
}
// int main(){
//     char str;
//     Checkvowlesornot(str);
    
// }

#include<ctype.h>

// int main(){
//     char str[20];
//     int vowels = 0,consonants = 0;
    
//     scanf("%[^\n]s", str);
  
//     for(int i = 0;str[i] ;i++){
//         if(str[i] == 'a'|| str[i] == 'e' || str[i] == 'i'|| str[i] == 'o'|| str[i] == 'u'|| str[i] == 'A'|| str[i] == 'E'|| str[i] == 'I'|| str[i] == 'O'|| str[i] == 'U'){
//             vowels++;
//         }
//         else{
//             consonants++;
//         }
//     }
//     printf("%d\n",vowels);
//     printf("%d",consonants);
// }

// int main(){
//     char str = '?';
//     if((str>=97 && str<=122) || (str>=65 && str<=90)){
//         printf("alpha");
//     }
//     else{
//         printf("not a alpha");
//     }
// }

// int main(){
//     char str;
//     printf("Enter a str: ");
//     scanf("%c",&str);
    
//     if (str>=97 && str<= 122){
//         printf("%c is a lowercase",str);
//     }
//     else if(str >= 65 && str <=90){
//         printf("%c is a UPERCASE",str);
//     }
//     else{
//         printf("Invalid charcater");
//     }
// }

void coverting(char str[]){
    
    
    for(int i = 0;str[i];i++){
        if(islower(str[i])){
            str[i] = toupper(str[i]);
        }
        else if(isupper(str[i])){
            str[i] = tolower(str[i]);
        }
    }
}
int main(){
    char str[100];
    printf("Enter a String: ");
    scanf("%s",str);
    
    coverting(str);
    printf("After converting: %s\n",str);
    
}

 int main(){
//     char str[100];
//     printf("Enter a String: ");
//     scanf("%s",str);
    
//     coverting(str);
//     printf("After converting: %s\n",str);
    
// }

// int main(){
//     char str[20];
//     int i;
//     fgets(str,sizeof(str),stdin);
//     for(int i = 0;str[i] != '\0';i++){
//         if(str[i]>='A'&& str[i]<='Z'){
//             str[i] = str[i]+32;
//         }
//         else if(str[i] >='a'&& str[i] <= 'z'){
//             str[i] = str[i]-32;
//         }
//     }
//       printf("%s",str);
// }

char converting(char str[20]){
    int i;
    for(int i = 0;str[i] != '\0';i++){
        if (str[i] >='A' && str[i] <= 'Z'){
            str[i] = str[i]+32;
        }
        else if(str[i] >='a'&&str[i] <= 'z'){
            str[i] = str[i]-32;
        }
    }
    printf("%s",str);
}
// int main(){
//     char str[20];
//     printf("Enter a string: ");
//     fgets(str,sizeof(str),stdin);
//     converting(str);
// }

// int main() {
//     char str[100];
//     fgets(str, sizeof(str), stdin);

//     int i, len, flag = 0;
//     len = strlen(str);

    
//     if (str[len - 1] == '\n') {
//         str[len - 1] = '\0';
//         len--; 
//     }
//     for (i = 0; i < len / 2; i++) {
//         if (str[i] != str[len - i - 1]) {
//             flag = 1;
//             break;
//         }
//     }
//     if (flag) {
//         printf("%s is not a palindrome\n", str);
//     } else {
//         printf("%s is a palindrome\n", str);
//     }

//     return 0;
// }

// Remove vowels in a given string
// int main(){
//     char str[20];
//     int i,j=0;
//     fgets(str,sizeof(str),stdin);
//     for(int i = 0;str[i] != '\0';i++){
//         if(str[i] != 'a'&& str[i] != 'e' && str[i] != 'i'&& str[i] != 'o'&& str[i] != 'u'&& str[i] != 'A'&& str[i] != 'E'&& str[i] != 'I'&& str[i] != 'O'&& str[i] != 'U'){
//             str[j++] = str[i];
//         }
//     }
//     str[j] = '\0';
//     printf("String: %s ",str);
// }

void matrix(int n, int m) {
    int arr[10][10]; 

    
    printf("Enter the elements of the matrix (%d x %d):\n", n, m);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            scanf("%d", &arr[i][j]);
        }
    }

    // Print the matrix
    printf("The matrix is:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            printf("%d ", arr[i][j]); // Print without using '&'
        }
        printf("\n");
    }
}
int main() {
    int n, m;

    // Get matrix dimensions from user
    printf("Enter number of rows and columns: ");
    scanf("%d %d", &n, &m);

    // Call the matrix function
    matrix(n, m);

    return 0;
}

void Add_matrix(int n,int m){
    arr = [10][10];
    printf("Enter a no.of rows and cols (%d x %d): ",n,m);
    for(int i = 0;i<n;i++){
        for(int j = 0;j<m;j++){
            scanf("%d",arr[i][j]);
        }
    }
    
}

#include<stdio.h>

// Z pattern matrix

// int main(){
//     int r,c;
//     printf("Enter a no.of rows and cols: ");
//     scanf("%d %d",&r,&c);
    
//     int a[r][c];
//     printf("enter a array ele: ");
//     for(int i = 0;i<r;i++){
//         for(int j = 0;j<c;j++){
//             scanf("%d",&a[i][j]);
//         }
//     }
//     // printf("Top ele");
//     for(int j = 0;j<r;j++){
//         printf("%d",a[0][j]);
//     }
//     printf("\n");
//     // printf("Middle ele");
//     for(int i = 1;i<r-1;i++){
//         printf(" %d",a[i][c-i-1]);
//     }  
//     printf("\n");
//     // printf("Bottom");
//     for(int i = 0;i< c;i++){
//         printf("%d",a[r-1][i]);
//     }
//     printf("\n");
// }

//pointers

// int main(){
//     int* pc,c;
//     c= 22;
//     printf("%d\n",c);
//     printf("%p\n",&c);
    
//     pc = &c;
//     printf("%p\n",pc);
//     printf("%d\n",*pc);
    
//     c = 11;
//     printf("%p\n",&c);
//     printf("%d\n",c);
    
//     int d = 5;
//     int *p = &d;
//     printf("%d\n",*pc)
    
    
// } // pointers

// int main(){
//     int x = 5;
//     int y = 10;
//     swap(&x,&y);
//     printf("x:%d y:%d",x,y);
    
// }

#include <stdlib.h>

// int main(){
//     int n = 5;
//     int *ptr = (int*)malloc(n*sizeof(int));
//     for(int i = 0;i<n;i++){
//         scanf("%d",&ptr[i]);
//     }
//     for(int i = 0;i<n;i++){
//         printf("%d",ptr[i]); //*(ptr+i) instead of ptr[i] we can use  
//     }
// }

// int main(){
//     int r=3,c=3;
    
//     int **arr = (int**)malloc(r*sizeof(int*));
//     for(int i = 0;i<r;i++){
//         arr[i] = (int*)malloc(c*sizeof(int));
//     }
//     printf("Enter a Matrix elements: ");
//     for(int i = 0;i<r;i++){
//         for(int j = 0;j<c;j++){
//             scanf("%d",&*(*(arr+i))+j);
//         }
//     }
//     for(int i = 0;i<r;i++){
//         for(int j = 0;j<c;j++){
//             printf("%d ",*(*(arr+i))+j);
//         }
//         printf("\n");
//     }
// }


#include <stdio.h>
#include <stdlib.h>

//Addition of two matrixes

int main(){
    int r,c;
    printf("Enter a no.of (rows X cols): ");
    scanf("%d %d",&r,&c);
    
   

    int **arr = (int**)malloc(r*sizeof(int*));
    for(int i = 0;i<r;i++){
        arr[i] = (int*)malloc(c*sizeof(int));
    }
    
    printf("Enter a 1st Matrix  elements: ");
    for(int i = 0;i<r;i++){
        for(int j = 0;j<c;j++){
            scanf("%d",&arr[i][j]);
        }
    }
    
    int **brr = (int**)malloc(r*sizeof(int*));
    for(int i = 0;i<r;i++){
        brr[i] = (int*)malloc(c*sizeof(int));
    }
    printf("Enter a 2nd Matrix elements: ");
    for(int i = 0;i<r;i++){
        for(int j = 0;j<c;j++){
            scanf("%d",&brr[i][j]);
        }
    }
    printf("sum of matrix : \n");
    for(int i = 0;i<r;i++){
        for(int j = 0;j<c;j++){
            printf("%d ",arr[i][j]+brr[i][j]);
        }
        printf("\n");
    }
    // printf("\n");
    
}    
    
    // multiplication of matrix
    
// int main() {
//     int r, c;
//     printf("Enter the number of rows and columns: ");
//     scanf("%d %d", &r, &c);

//     // Allocate memory for M1
//     int **M1 = (int **)malloc(r * sizeof(int *));
//     for (int i = 0; i < r; i++) {
//         M1[i] = (int *)malloc(c * sizeof(int));
//     }

//     printf("Enter elements of the 1st matrix:\n");
//     for (int i = 0; i < r; i++) {
//         for (int j = 0; j < c; j++) {
//             scanf("%d", &M1[i][j]);
//         }
//     }

//     // Allocate memory for M2
//     int **M2 = (int **)malloc(r * sizeof(int *));
//     for (int i = 0; i < r; i++) {
//         M2[i] = (int *)malloc(c * sizeof(int));
//     }

//     printf("Enter elements of the 2nd matrix:\n");
//     for (int i = 0; i < r; i++) {
//         for (int j = 0; j < c; j++) {
//             scanf("%d", &M2[i][j]);
//         }
//     }

//     // Allocate memory for result matrix
//     int **result = (int **)malloc(r * sizeof(int *));
//     for (int i = 0; i < r; i++) {
//         result[i] = (int *)malloc(c * sizeof(int));
//     }

//     // Matrix multiplication logic
//     for (int i = 0; i < r; i++) {
//         for (int j = 0; j < c; j++) {
//             result[i][j] = 0;
//             for (int k = 0; k < c; k++) {
//                 result[i][j] += M1[i][k] * M2[k][j];
//             }
//         }
//     }

//     // Display result matrix
//     printf("Result of matrix multiplication:\n");
//     for (int i = 0; i < r; i++) {
//         for (int j = 0; j < c; j++) {
//             printf("%d ", result[i][j]);
//         }
//         printf("\n");
//     }
// }  //matrix multiplication
    
    // matrix boundries
    
int main() {
    int n, m;
    printf("Enter the number of rows and columns: ");
    scanf("%d %d", &n, &m);

    int arr[n][m];
    printf("Enter matrix elements:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            scanf("%d", &arr[i][j]);
        }
    }

    // Print the top row
    printf("Top row elements:\n");
    for (int i = 0; i < m; i++) {
        printf("%d ", arr[0][i]);
    }
    printf("\n");

    // Print middle elements (left and right boundary for middle rows)
    printf("Middle row elements:\n");
    for (int i = 1; i < n - 1; i++) {
        printf("%d ", arr[i][0]);  // Left boundary
        for (int j = 1; j < m - 1; j++) {
            printf("  ");  // Space for non-boundary elements
        }
        printf("%d\n", arr[i][m - 1]);  // Right boundary
    }

    // Print the bottom row
    if (n > 1) {  // Only if there are more than one row
        printf("Bottom row elements:\n");
        for (int i = 0; i < m; i++) {
            printf("%d ", arr[n - 1][i]);
        }
    }
    printf("\n");

    return 0;
}

// 

#include <string.h>
struct student{
    int reg;
    char name[50];
    char dept[50];
};

int main(){
    struct student s1;
    struct student s2;
    
    s1.reg = 456;
    strcpy(s1.name,"Shardha kapra");
    strcpy(s1.dept,"Aapna College");
    
    s2.reg = 123;
    strcpy(s2.name,"Jenny");
    strcpy(s2.dept,"Ex-Software engineer");
    
    printf("Reg no: %d\n",s1.reg);
    printf("Name: %s\n",s1.name);
    printf("Department: %s\n",s1.dept);
    
    printf("\n");
    
    printf("Reg no: %d\n",s2.reg);
    printf("Name: %s\n",s2.name);
    printf("Department: %s\n",s2.dept);

}
    
    
    
    
    
    
    
    

 















































    
    
    








































