#include <stdio.h>
#include <stdbool.h>

void prime_number(int num) {
    if (num <= 1) {
        printf("%d is not a prime number\n", num);
        return;
    }

    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0) {
            printf("%d is not a prime number\n", num);
            return;
        }
    }
    printf("%d is a prime number\n", num);
}
int main(){
    int num;
    printf("Enter a number: ");
    scanf("%d",&num);
    
    prime_number(num);
}


void multiplicationTable(int n){
    
    printf("Multiplication table %d is ",n);
    for(int i =1;i<=10;i++){
        printf("%d x %d = %d\n",n,i,n*i);
    }
}
// int main(){
//     int n;
//     printf("Enter a number: ");
//     scanf("%d",&n);
//     multiplicationTable(n);
// }

// Right angle
void pattern(int n){
    
    for(int i =0;i<=n;i++){
        for(int j = 0;j<i;j++){
            printf("*");
        }
        printf("\n");
    }
}
// int main(){
//     int n;
//     printf("Enter a number: ");
//     scanf("%d",&n);
//     pattern(n);
// }

void Simpleintrest(float p,float r,float t){
    
    float si;
    si = (p*t*r)/100;
    printf("%.2f\n",si);
}
// int main(){
//     float p,t,r;
//     printf("\nEnter a Price :");
//     scanf("%f",&p);
    
//     printf("\nEnter a rate :");
//     scanf("%f",&r);
    
//     printf("\nEnter a Time :");
//     scanf("%f",&t);
    
//     Simpleintrest(p,r,t);
// }

bool is_prime(int num){
    if (num <= 1){
        return false;
    }
    for(int i=2;i*i<=num;i++){
        if(num%i==0){
            return false;
        }
        return true;
    }
}
void check_primes(int arr[],int size){
    for(int i =0;i<size;i++){
        if (is_prime(arr[i])){
            printf("%d is a prime\n",arr[i]);
        } 
        else{
            printf("%d is not prime\n",arr[i]);
        }
    }
}

// int main(){
//     int arr[] = {2,1, 3, 4, 5, 6, 7, 8, 9, 10, 11};
//     int size = sizeof(arr)/sizeof(arr[0]);
    
//     check_primes(arr,size);
    
// }

int maxofTwo(int a, int b) {
    return (a > b) ? a : b;
}
// int main() {
//     int a, b;

//     a = 10; b = 20;
//     printf("Max of %d and %d is: %d\n", a, b, maxofTwo(a, b));
    
//     a = -3; b = -5;
//     printf("Max of %d and %d is: %d\n", a, b, maxofTwo(a, b));
    
//     a = -2; b = -2;
//     printf("Max of %d and %d is: %d\n", a, b, maxofTwo(a, b));
    
//     return 0;
// }

// FACTORIAL 
unsigned long long Factorial(int n){
    
    unsigned long long result = 1;
    for(int i =1;i<=n;i++){
        result *= i;
    }
    return result;
}
// int main(){
//     int n;
//     printf("Enter a number: ");
//     scanf("%d",&n);
    
//     if (n<0){
//         printf("%d is not a definied");
//     }
//     else{
//         printf("The factoriual of %d is :%llu",n,Factorial(n));
//     }
// }

int main(){
    int height;
    printf("Enter a height:");
    scanf("%d",&height);
    
    for(int i = 1;i<=height;i++){
        for(int j = i;j<height;j++){
            printf(" ");
        }
        for(int k = 1;k<=(2*i-1);k++){
            printf("!");
        }
        printf("\n");
    }
    for(int i = height-1; i>= 1;i--){
        for(int j=height;j>i;j--){
            printf(" ");
        }
        for(int k = 1;k<=(2*i-1);k++){
            printf("^");
        }
        printf("\n");
    }
}

// ARRAY ADDRESS
void array_address(char arr[],int size){
   
    for(int i = 0;i<size;i++){
        printf("%zu\n",&arr[i]);
    }
}
// int main(){
    
//     char arr[] = {'H','e','l','l','o'};
//     int size = sizeof(arr)/sizeof(arr[0]);
//     array_address(arr,size);
// }

// PRIMES 
bool whether_prime(int n){
    
    if(n<=1){
        return false;
    }
   
    for(int i =2;i*i<=n;i++){
        if(n%i==0){
            return false;
        }
        return true;
    }
}
// int main(){
//     int n;
//     printf("Enter a number: ");
//     scanf("%d",&n);
    
//     if (whether_prime(n)){
//         printf("true");
//     }
//     else{
//         printf("Flase");
//     }
// }

void dividingTwointegers(){
    // float a= 6,b=4;
    
    float f = (float)(6/4);
    // float f = (float)a/b;
    printf("%.2f\n",f);
}
// int main(){
//     dividingTwointegers();
// }

// EVEN/ODD
void Evenorodd(int num){
    if(num%2==0){
        printf("Even");
    }
    else{
        printf("Odd");
    }
}
// int main(){
//     int num;
//     printf("Enter a number: ");
//     scanf("%d",&num);
//     Evenorodd(num);
// }

unsigned long long factorial(int n){
    
    if(n==0 || n==1){
        return 1;
    }
    else{
        return n*factorial(n-1);
    }
}
// int main(){
//     int n;
//     printf("Enter a number: ");
//     scanf("%d",&n);
//     printf("The factorial of %d is : %llu",n,factorial(n));
// }

// SUM OF ARRAY
int Array_sum(int arr[],int size){
    int sum =0;
    for(int i = 0;i<=size;i++){
        sum += arr[i];
    }
    return sum;
}
// int main(){
//     int arr[] = {1,2,3,4,5,6};
//     int size = sizeof(arr)/sizeof(arr[0]);
    
//     int total_sum = Array_sum(arr,size);
//     printf("Total sum is : %d",total_sum);
// }

int fibonacci(int n){
    int n1 =0,n2 = 1;
    int nextterm;
    for(int i=0;i<=n;i++){
        
        printf("%d ",n1);
        nextterm = n1+n2;
        n1 = n2;
        n2 = nextterm;
    }
}
// int main(){
//     int n;
//     printf("Enter a number: ");
//     scanf("%d",&n);
//     int x = fibonacci(n);
//     printf("%d ",x);
    
// }

// FIBONACCI SERIES USING RECURSION
int Fibonacci_recursion(int n){
    if (n ==0){
        return 0;
    }
    else if(n==1){
        return 1;
    }
    else{
        return Fibonacci_recursion(n-1) + Fibonacci_recursion(n-2);
    }
}
// int main(){
//     int n;
//     printf("Enter a number: ");
//     scanf("%d",&n);
    
//     if (n<0){
//         printf("Not defined");
//     }
//     else{
//         printf("Fibonacci series: %d", Fibonacci_recursion(n));
//     }
// }


#include <stdio.h>
#include <string.h>
#include <ctype.h>

void countDown(int n){
    printf("CountDown started for method with n value %d\n",n);
    if(n<0){
        printf("\n\n\nStopping countDown  ...Happy recursion pratice\n\n");
        return;
    }
    printf("countDown Starts now:%d\n",n);
    countDown(n-1);
    printf("CountDown completed for method with n values %d\n",n);
}
// int main(){
//     int n;
//     printf("Enter a n value: ");
//     scanf("%d",&n);
//     countDown(n);
// }

void countDownwithEvennum(int n){
    if (n<=0){
        return;
    }
    if(n%2==0){
        printf("\n%d",n);
        countDownwithEvennum(n-2);
    }
}
// int main(){
//     int n = 20;
//     countDownwithEvennum(n);
// }

void countDownwithOddnum(int n){
    if (n<0){
        return;
        
    }
    printf("%d\n",n);
    countDownwithOddnum(n-1);
    
}
// int main(){
//     int n = 2;
//     countDownwithOddnum(n);
// }

void countDownTillModuleEqualToZero(int n){
    if (n<=0){
        return;
    }
    printf("\n%d",n);
    countDownTillModuleEqualToZero(n-1);
}
// int main(){
//      int n = 12;
//     countDownTillModuleEqualToZero(n);
//  }

unsigned long long Factorial(int n){
    if (n==0){
        return 1;
    }
    else{
        return  n * Factorial(n-1);
    }
}
// int main(){
//     int n = 5;
//     printf("Factorial of %d is : %llu",n,Factorial(n));
// }

int fibonacci(int n) {
    if (n == 0) return 0;
    if (n == 1) return 1;
    
    int a = 0, b = 1, c = 0;
    for (int i = 2; i <= n; i++) {
        c = a + b;
        a = b;
        b = c;
    }
    return c;
    
}
// int main() {
//     int n =7;
//     printf("Fibonacci number at position %d is %d\n", n,fibonacci(n));
//     for(int i = 0;i<=n;i++){
//         printf("%d\n",fibonacci(i));
//     }
//     printf("\n");
// }

void Modulus(int a, int b) {
    if (a <= 0 || b <= 0) {
        return;
    }
    printf("%d modulus of %d is %d\n", a, b, a % b);
    Modulus(b, a % b);
}                                                       //GCD and modulus
// int main() {
//     int a, b;
//     printf("Enter two numbers: ");
//     scanf("%d %d", &a, &b);  // Corrected format string
//     Modulus(a, b);
//     return 0;
// }

int is_palindromeRec(char str[],int left,int right){
    if(left >=right){
        return 1;
    }
    if(str[left] != str[right]){
        return 0;
    }
    return is_palindromeRec(str,left + 1,right - 1);
}
// int main(){
//     char str[100] = "madam";
//     int left;
//     int right = strlen(str) -1 ;
    
//     if (is_palindromeRec(str, left, right)) {
//         printf("\"%s\" is a palindrome.\n", str);
//     } else {
//         printf("\"%s\" is not a palindrome.\n", str);
//     }
// }

int sumofArray(int arr[],int size){
    int sum = 0;
    for(int i = 0;i<size;i++){
        sum += arr[i];
    }
    return sum;
}
// int main(){
//     int arr[] = {2,3,4,5,6};
//     int size = sizeof(arr)/sizeof(arr[0]);
//     printf("Array sum : %d",sumofArray(arr,size));
// }


void towerofHonoi(int n,char source,char target,char auxiliary){
    if (n==1) {
        printf("Move disk 1 from %c to %c\n",source,target);
        return;
    }
    towerofHonoi(n-1,source,auxiliary,target);
    printf("Move disk %d from %c to %c\n",n,source,target);
    towerofHonoi(n-1,auxiliary,target,source);
}
// int main(){
    
//     towerofHonoi(3,'A','B','C');
// }



void mat(int r,int c){
    for(int i = 0;i<r;i++){
        for(int j = 0;j<c;j++){
            printf("%d %d\n",i,j);
        }
    }
}
// int main(){
//     mat(3,4);
// }



void addMatrix(int a[2][2],int b[2][2],int result[2][2]){
   for(int i = 0;i<2;i++){
       for(int j = 0;j<2;j++){
           result[i][j] = a[i][j] + b[i][j];
       }
   }
}
// int main(){
//     int a[2][2] = {{1,2},{3,4}};
//     int b[2][2] = {{5,6},{7,8}};
//     int result[2][2];
//     addMatrix(a,b,result);
    
//     for(int i = 0;i<2;i++){
//         for(int j = 0;j<2;j++){
//             printf("%d ",result[i][j]);
//         }
//         printf("\n");
//     }
// }









































